% Script to generate summaries of inference results for fluo bin test
clear
close all
addpath('../utilities')
% Core parameters
K = 3; % State(s) to use for inference
w = 7; % Memory
t_start = 0;
dp_bootstrap = 1; % if 1 use bootstrap resampling at level of data points
project = 'revision_fluo_bins_v3';
FigPath = ['../../fig/revisions/' project '/'];
mkdir(FigPath);
RawPath = '../../dat/revisions/';
InferencePath = ['S:\Nick\Dropbox (Personal)\kinetic_scultping_inference_results\eve7stripes_data_v2\revision_fluo_bins_v3/' project '/'];
read_prefix = ['w' num2str(w) '_K' num2str(K) '_t' num2str(t_start) '_'];
%%%% Stable Params (these rarely change) %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\
Tres = 20; % Time Resolution
min_dp = 10; % min length of traces to include

% load data
load([InferencePath read_prefix 'fluo_bin_particle_ids.mat'],'particle_id_cell')
fluo_bin_results  = readtable([InferencePath read_prefix 'fluo_bin_results_full_final.csv']);
load([RawPath 'inference_traces_w_stripe_ids.mat'],'trace_struct_final')
% load old hmm results for comparison
hmm_results = readtable("X:\Nick\projects\all_the_stripes_cd\dat\eve7stripes_inf_2018_04_28\w7_t20_alpha14_f1_cl1_no_ends1_tbins1\K3_summary_stats\eve_hmm_summary_K3.csv");
%%% Get indexing vectors
% from "raw" trace structure
trace_particle_index = [trace_struct_final.ParticleID];
trace_stripe_index = [];
trace_weight_vec = [trace_struct_final.N];
%%
for  i = 1:numel(trace_struct_final)
    msi = round(nanmean(trace_struct_final(i).mike_stripe_id)*3)/3;
    trace_stripe_index = [trace_stripe_index msi];
end

% from inference results
inf_particle_vec = [particle_id_cell{:}];
inf_particle_index = unique(inf_particle_vec);
inf_stripe_vec = fluo_bin_results.stripe_id;
% calculate particle-by-particle burst parameters and time weights

% generate helper indexing vec
inf_index_vec = [];
for i = 1:numel(particle_id_cell)
    inf_index_vec = [inf_index_vec repelem(i,numel(particle_id_cell{i}))];
end
% initialize results vecotrs
kon_vec = NaN(size(inf_particle_index));
koff_vec = NaN(size(inf_particle_index));
r_vec = NaN(size(inf_particle_index));
r_eff_vec = NaN(size(inf_particle_index));
weight_vec = NaN(size(inf_particle_index));
stripe_vec = NaN(size(inf_particle_index));

for p = 1:numel(inf_particle_index)
    ParticleID = inf_particle_index(p);
    p_ft = inf_particle_vec == ParticleID;
    inf_ids = inf_index_vec(p_ft);
    % take averages for each param
    st_ft = fluo_bin_results(inf_ids,:).stripe_id~=0;    
    if any(st_ft)
        kon_vec(p) = nanmean(fluo_bin_results(inf_ids,:).kon(st_ft));
        koff_vec(p) = nanmean(fluo_bin_results(inf_ids,:).koff(st_ft));
        r_vec(p) = nanmean(fluo_bin_results(inf_ids,:).r2(st_ft));
        r_eff_vec(p) = nanmean(fluo_bin_results(inf_ids,:).r_eff(st_ft));
    end
    % save id vars
    weight_vec(p) = trace_weight_vec(trace_particle_index==ParticleID);
    stripe_vec(p) = trace_stripe_index(trace_particle_index==ParticleID);
end

%%% reaggregate by stripe region
nBoots = 100;
stripe_axis = unique(trace_stripe_index);
stripe_axis = stripe_axis(~isnan(stripe_axis));
stripe_axis_rd = round(stripe_axis);

kon_boot_array = NaN(nBoots,numel(stripe_axis));
koff_boot_array = NaN(nBoots,numel(stripe_axis));
r_boot_array = NaN(nBoots,numel(stripe_axis));
r_eff_boot_array = NaN(nBoots,numel(stripe_axis));

% take bootstrap samples
for s = 1:numel(stripe_axis)
    stripe_ids = find(stripe_vec==stripe_axis(s));
    for n = 1:nBoots
        boot_ids = randsample(stripe_ids,numel(stripe_ids),true);
        % take weighted averages
        boot_weights = weight_vec(boot_ids);
        kon_boot_array(n,s) = nansum(kon_vec(boot_ids).*boot_weights) / nansum(boot_weights);
        koff_boot_array(n,s) = nansum(koff_vec(boot_ids).*boot_weights) / nansum(boot_weights);
        r_boot_array(n,s) = nansum(r_vec(boot_ids).*boot_weights) / nansum(boot_weights);
        r_eff_boot_array(n,s) = nansum(r_eff_vec(boot_ids).*boot_weights) / nansum(boot_weights);
    end
end

% take averages and standard errors
kon_mean_vec = nanmean(kon_boot_array);
kon_se_vec = nanstd(kon_boot_array);

koff_mean_vec = nanmean(koff_boot_array);
koff_se_vec = nanstd(koff_boot_array);

r_mean_vec = nanmean(r_boot_array);
r_se_vec = nanstd(r_boot_array);

r_eff_mean_vec = nanmean(r_eff_boot_array);
r_eff_se_vec = nanstd(r_eff_boot_array);

%%% make figures
close all
% extract vectors for orig results
stripe_id_orig = hmm_results.stripe_id;
stripe_id_orig(stripe_id_orig==0) = NaN;
stripe_id_rd_orig = round(stripe_id_orig);
kon_orig = hmm_results.k_on;
koff_orig = hmm_results.k_off;
r_orig = hmm_results.initiation_rate_on;
% stripe indexing vec
stripe_index = 1:7;
% colors
blue = [115 143 193]/256;
purple = [171 133 172]/256;
red = [213 108 85]/256;

% initiation rate
r_fig = figure;
hold on

for s = stripe_index
    pt_ft = stripe_axis_rd == s;
    pt_ft_orig = stripe_id_rd_orig == s;
    
    plot(stripe_axis(pt_ft),r_mean_vec(pt_ft)*60,'Color','black')
    s1 = scatter(stripe_axis(pt_ft),r_mean_vec(pt_ft)*60,'MarkerFaceColor',blue,'MarkerEdgeColor','black');
    
    plot(stripe_id_orig(pt_ft_orig),r_orig(pt_ft_orig),'Color','black')
    s2 = scatter(stripe_id_orig(pt_ft_orig),r_orig(pt_ft_orig),'MarkerFaceColor',red,'MarkerEdgeColor','black');
end

xlabel('stipe position')
ylabel('initiation rate (au/min)')
box on
set(gca,'Fontsize',14)
legend([s1 s2], 'fluo-binned','stripe-binned')
saveas(r_fig,[FigPath 'init_fluo_vs_stripe_bins.png'])

% kon fig
kon_fig = figure;
hold on

for s = stripe_index
    pt_ft = stripe_axis_rd == s;
    pt_ft_orig = stripe_id_rd_orig == s;
    
    plot(stripe_axis(pt_ft),kon_mean_vec(pt_ft)*60,'Color','black')
    s1 = scatter(stripe_axis(pt_ft),kon_mean_vec(pt_ft)*60,'MarkerFaceColor',blue,'MarkerEdgeColor','black');
    
    plot(stripe_id_orig(pt_ft_orig),kon_orig(pt_ft_orig),'Color','black')
    s2 = scatter(stripe_id_orig(pt_ft_orig),kon_orig(pt_ft_orig),'MarkerFaceColor',red,'MarkerEdgeColor','black');
end

xlabel('stipe position')
ylabel('on rate (events/min)')
box on
set(gca,'Fontsize',14)
legend([s1 s2], 'fluo-binned','stripe-binned')
saveas(kon_fig,[FigPath 'kon_fluo_vs_stripe_bins.png'])

koff_fig = figure;
hold on

for s = stripe_index
    pt_ft = stripe_axis_rd == s;
    pt_ft_orig = stripe_id_rd_orig == s;
    
    plot(stripe_axis(pt_ft),koff_mean_vec(pt_ft)*60,'Color','black')
    s1 = scatter(stripe_axis(pt_ft),koff_mean_vec(pt_ft)*60,'MarkerFaceColor',blue,'MarkerEdgeColor','black');
    
    plot(stripe_id_orig(pt_ft_orig),koff_orig(pt_ft_orig),'Color','black')
    s2 = scatter(stripe_id_orig(pt_ft_orig),koff_orig(pt_ft_orig),'MarkerFaceColor',red,'MarkerEdgeColor','black');
end

xlabel('stipe position')
ylabel('off rate (events/min)')
box on
set(gca,'Fontsize',14)
legend([s1 s2], 'fluo-binned','stripe-binned')
saveas(koff_fig,[FigPath 'koff_fluo_vs_stripe_bins.png'])

% generate final versions of data sets for 

stripe_table_new = array2table([stripe_axis', 60*kon_mean_vec', 60*kon_se_vec', ...
    60*koff_mean_vec', 60*koff_se_vec', 60*r_eff_mean_vec', 60*r_eff_se_vec'],'VariableNames',...
    {'stripe_id','kon','kon_err','koff','koff_err','r','r_err'});

writetable(stripe_table_new,[InferencePath 'stripe_hmm_results_final.csv'])